type ActuatorNodeType {
  actuatorType: ActuatorTypeEnum
  batteryLevel: Float
  createdAt: DateTime!
  currentState: Boolean
  deviceId: String!
  favorite: Boolean!
  id: Int
  isOnline: Boolean!
  lastOnline: DateTime
  mainframe: MainframeType
  manualOverride: Boolean!
  manualOverrideUntil: DateTime
  name: String
  nodeType: NodeTypeEnum
  systemVersion: String
  thresholdGroups: [ThresholdGroupType!]!
  type: Int!
  uid: UUID!
  updatedAt: DateTime!
}

enum ActuatorOperatorEnum {
  EQUAL
  NOT_EQUAL
}

enum ActuatorTypeEnum {
  FAN
  HEATER
  LIGHT
  UNASSIGNED
  WATER_PUMP
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

type HouseholdType {
  createdAt: DateTime!
  id: Int
  mainframes: [MainframeType!]!
  name: String
  thresholdGroups: [ThresholdGroupType!]!
  updatedAt: DateTime!
  users(after: String, before: String, first: Int, last: Int, offset: Int): UserTypeConnection!
}

type MainframeType {
  actuators: [ActuatorNodeType!]!
  batteryLevel: Float
  createdAt: DateTime!
  deviceId: String!
  favorite: Boolean!
  household: HouseholdType
  id: Int
  isOnline: Boolean!
  lastOnline: DateTime
  name: String
  sensors: [SensorNodeType!]!
  systemVersion: String
  type: NodeTypeEnum
  uid: UUID!
  updatedAt: DateTime!
}

type Mutation {
  refreshToken(token: String): Refresh
  tokenAuth(email: String!, password: String!): ObtainJSONWebToken
  userProfileImageUpload(profileImage: Upload!): UserProfileImageMutation
  verifyToken(token: String): Verify
}

enum NodeTypeEnum {
  ACTUATOR
  COMBINED
  MAINFRAME
  SENSOR
  UNASSIGNED
}

type ObtainJSONWebToken {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
  user: UserType
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Query {
  actuatorNode(
    """The ID of the object"""
    id: ID!
  ): ActuatorNodeType
  allActuatorNodes(mainframeId: Int!): [ActuatorNodeType!]
  allHouseholds: [HouseholdType!]
  allMainframes: [MainframeType!]
  allSensorConditions(groupId: Int!): [SensorConditionType!]
  allSensorNodes(mainframeId: Int!): [SensorNodeType!]
  allThresholdGroups(householdId: Int!): [ThresholdGroupType!]
  allUsers: [UserType!]
  household(
    """The ID of the object"""
    id: ID!
  ): HouseholdType
  mainframe(
    """The ID of the object"""
    id: ID!
  ): MainframeType
  sensorCondition(
    """The ID of the object"""
    id: ID!
  ): SensorConditionType
  sensorNode(
    """The ID of the object"""
    id: ID!
  ): SensorNodeType
  thresholdGroup(id: Int!): ThresholdGroupType
  user(
    """The ID of the object"""
    id: ID!
  ): UserType
}

type Refresh {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}

type SensorConditionType {
  active: Boolean!
  createdAt: DateTime!
  group: ThresholdGroupType!
  id: Int
  operator: SensorOperatorEnum
  sensor: SensorNodeType!
  updatedAt: DateTime!
  value: Float!
}

type SensorNodeType {
  batteryLevel: Float
  createdAt: DateTime!
  currentValue: Float
  deviceId: String!
  favorite: Boolean!
  id: Int
  isOnline: Boolean!
  lastOnline: DateTime
  mainframe: MainframeType
  name: String
  nodeType: NodeTypeEnum
  sensorConditions: [SensorConditionType!]!
  sensorType: SensorTypeEnum
  systemVersion: String
  type: Int!
  uid: UUID!
  unitType: UnitTypeEnum
  updatedAt: DateTime!
}

enum SensorOperatorEnum {
  EQUAL
  GREATER_THAN
  GREATER_THAN_OR_EQUAL
  LESS_THAN
  LESS_THAN_OR_EQUAL
  NOT_EQUAL
}

enum SensorTypeEnum {
  CO2
  HUMIDITY
  LIGHT
  SOIL_MOISTURE
  SOIL_PH
  TEMPERATURE
  UNASSIGNED
}

type Subscription {
  countSeconds(upTo: Int): Int
}

type ThresholdGroupType {
  active: Boolean!
  actuators: [ActuatorNodeType!]!
  createdAt: DateTime!
  household: HouseholdType!
  id: Int
  name: String!
  operator: ActuatorOperatorEnum
  priority: Int!
  sensorConditions: [SensorConditionType!]!
  updatedAt: DateTime!
}

"""
Leverages the internal Python implementation of UUID (uuid.UUID) to provide native UUID objects
in fields, resolvers and input.
"""
scalar UUID

enum UnitTypeEnum {
  CO2
  HUMIDITY
  LIGHT
  SOIL_MOISTURE
  SOIL_PH
  TEMPERATURE
}

"""
Create scalar that ignores normal serialization/deserialization, since
that will be handled by the multipart request spec
"""
scalar Upload

type UserProfileImageMutation {
  profileImage: String
  success: Boolean
}

type UserType {
  email: String!
  firstName: String!
  id: Int

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  isActive: Boolean!

  """Designates whether the user can log into this admin site."""
  isStaff: Boolean!

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  isSuperuser: Boolean!
  lastName: String!
  profileImage: String

  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
}

type UserTypeConnection {
  """Contains the nodes in this connection."""
  edges: [UserTypeEdge]!

  """Pagination data for this connection."""
  pageInfo: PageInfo!
}

"""A Relay edge containing a `UserType` and its cursor."""
type UserTypeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: UserType
}

type Verify {
  payload: GenericScalar!
}