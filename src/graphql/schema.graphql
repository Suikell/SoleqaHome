type ActuatorConditionType {
  active: Boolean!
  actuator: ActuatorNodeType!
  createdAt: DateTime!
  id: Int!
  operator: ActuatorOperatorEnum!
  operatorStr: String!
  thresholdGroup: ThresholdGroupType!
  updatedAt: DateTime!
  value: Boolean!
}

type ActuatorNodeSubscriptionType {
  actuatorType: ActuatorTypeEnum
  batteryLevel: Float
  createdAt: DateTime!
  currentState: Boolean!
  deviceId: String!
  favorite: Boolean!
  id: Int!
  isOnline: Boolean!
  lastOnline: DateTime
  manualOverride: Boolean!
  manualOverrideUntil: DateTime
  manualOverrideValue: Boolean
  name: String!
  nodeType: NodeTypeEnum
  systemVersion: String
  type: Int!
  uid: UUID!
}

type ActuatorNodeType {
  actuatorConditions: [ActuatorConditionType!]!
  actuatorType: ActuatorTypeEnum
  batteryLevel: Float
  createdAt: DateTime!
  currentState: Boolean
  deviceId: String!
  favorite: Boolean!
  id: Int!
  isOnline: Boolean!
  lastOnline: DateTime
  mainframe: MainframeType
  manualOverride: Boolean!
  manualOverrideUntil: DateTime
  manualOverrideValue: Boolean
  name: String!
  nodeType: NodeTypeEnum
  systemVersion: String
  thresholdGroupActuators: [ThresholdGroupActuatorType!]!
  type: Int!
  uid: UUID!
  updatedAt: DateTime!
}

enum ActuatorOperatorEnum {
  """="""
  EQUAL

  """!="""
  NOT_EQUAL
}

enum ActuatorTypeEnum {
  FAN
  HEATER
  LIGHT
  UNASSIGNED
  WATER_PUMP
}

type AddActuatorConditionMutation {
  actuatorCondition: ActuatorConditionType
  message: String
  success: Boolean!
}

type AddActuatorToThresholdGroupMutation {
  message: String
  success: Boolean!
  thresholdGroup: ThresholdGroupType
}

type AddSensorConditionMutation {
  message: String
  sensorCondition: SensorConditionType
  success: Boolean!
}

type AddUserToHouseholdMigration {
  household: HouseholdType
  message: String
  success: Boolean!
}

type ChangeActuatorNameMutation {
  actuator: ActuatorNodeType
  message: String
  success: Boolean!
}

type ChangeMainframeNameMutation {
  mainframe: MainframeType
  message: String
  success: Boolean!
}

type ChangeSensorNameMutation {
  message: String
  sensor: SensorNodeType
  success: Boolean!
}

type ChangeThresholdGroupActiveMutation {
  message: String
  success: Boolean!
  thresholdGroup: ThresholdGroupType
}

type ChangeThresholdGroupNameMutation {
  message: String
  success: Boolean!
  thresholdGroup: ThresholdGroupType
}

type ChangeUserPasswordMutation {
  success: Boolean!
}

type ChangeUserProfileMutation {
  success: Boolean!
  user: UserType
}

type CreateThresholdGroupMutation {
  message: String
  success: Boolean!
  thresholdGroup: ThresholdGroupType
}

type DailyLogValuesType {
  createdAt: DateTime!
  date: Date!
  sensorValues(householdId: Int, limit: Int, sensorType: String): [SensorValueType!]
  updatedAt: DateTime!
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

enum DateRangeTypeEnum {
  """DAY"""
  DAY

  """HOUR"""
  HOUR

  """MONTH"""
  MONTH

  """YEAR"""
  YEAR
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type DeleteThresholdGroupMutation {
  message: String
  success: Boolean!
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

type HouseholdType {
  createdAt: DateTime!
  householdUsers: [HouseholdUserType!]!
  id: Int!
  mainframes: [MainframeType!]!
  name: String
  thresholdGroups: [ThresholdGroupType!]!
  updatedAt: DateTime!
}

type HouseholdUserType {
  createdAt: DateTime!
  household: HouseholdType!
  id: Int!
  isActivated: DateTime
  isOwner: Boolean!
  updatedAt: DateTime!
  user: UserType!
}

type MainframeType {
  actuators(favorite: Boolean): [ActuatorNodeType!]
  batteryLevel: Float
  createdAt: DateTime!
  deviceId: String!
  favorite: Boolean!
  household: HouseholdType
  id: Int!
  isOnline: Boolean!
  lastOnline: DateTime
  name: String!
  sensors(critical: Boolean, favorite: Boolean): [SensorNodeType!]
  systemVersion: String
  type: NodeTypeEnum
  uid: UUID!
  updatedAt: DateTime!
}

type MarkAllAsRead {
  message: String
  success: Boolean!
  unreadCount: Int
}

type Mutation {
  addActuatorCondition(actuatorId: Int!, operator: ActuatorOperatorEnum!, thresholdGroupId: Int!, value: Boolean!): AddActuatorConditionMutation
  addActuatorToThresholdGroup(actuatorId: Int!, thresholdGroupId: Int!): AddActuatorToThresholdGroupMutation
  addSensorCondition(operator: SensorOperatorEnum!, sensorId: Int!, thresholdGroupId: Int!, value: Float!): AddSensorConditionMutation
  addUserToHousehold(householdId: Int!, userEmail: String!): AddUserToHouseholdMigration
  changeActuatorName(actuatorId: Int!, name: String!): ChangeActuatorNameMutation
  changeMainframeName(mainframeId: Int!, name: String!): ChangeMainframeNameMutation
  changeSensorName(name: String!, sensorId: Int!): ChangeSensorNameMutation
  changeThresholdGroupActive(active: Boolean!, thresholdGroupId: Int!): ChangeThresholdGroupActiveMutation
  changeThresholdGroupName(name: String!, thresholdGroupId: Int!): ChangeThresholdGroupNameMutation
  changeUserPassword(newPassword: String!, oldPassword: String!): ChangeUserPasswordMutation
  changeUserProfile(firstName: String, lastName: String): ChangeUserProfileMutation
  createThresholdGroup(active: Boolean, householdId: Int!, name: String!): CreateThresholdGroupMutation
  deleteThresholdGroup(thresholdGroupId: Int!): DeleteThresholdGroupMutation
  markAllAsRead: MarkAllAsRead
  refreshToken(token: String): Refresh
  removeActuatorCondition(actuatorConditionId: Int!): RemoveActuatorConditionMutation
  removeActuatorFromThresholdGroup(actuatorId: Int!, thresholdGroupId: Int!): RemoveActuatorFromThresholdGroupMutation
  removeSensorCondition(sensorConditionId: Int!): RemoveSensorConditionMutation
  setActuatorChangeToStateThresholdGroup(actuatorId: Int!, changeToState: Boolean!, thresholdGroupId: Int!): SetActuatorChangeToStateThresholdGroupMutation
  setActuatorThresholdGroupPriority(actuatorId: Int!, priority: Int!, thresholdGroupId: Int!): SetActuatorThresholdGroupPriorityMutation
  setCriticalOverDisplay(sensorId: Int!, value: Boolean!): SetCriticalOverDisplayMutation
  setCriticalOverValue(sensorId: Int!, value: Float): SetCriticalOverMutation
  setCriticalUnderDisplay(sensorId: Int!, value: Boolean!): SetCriticalUnderDisplayMutation
  setCriticalUnderValue(sensorId: Int!, value: Float): SetCriticalUnderMutation
  setFavoriteActuator(actuatorId: Int!, favorite: Boolean!): SetFavoriteActuatorMutation
  setFavoriteSensor(favorite: Boolean!, sensorId: Int!): SetFavoriteSensorMutation
  setManualOverrideUntil(actuatorId: Int!, until: DateTime, value: Boolean): SetManualOverrideUntilMutation
  tokenAuth(email: String!, password: String!): ObtainJSONWebToken
  userProfileImageUpload(profileImage: Upload!): UserProfileImageMutation
  verifyToken(token: String): Verify
}

enum NodeTypeEnum {
  ACTUATOR
  COMBINED
  MAINFRAME
  SENSOR
  UNASSIGNED
}

type NotificationListType {
  notifications: [NotificationType]!
  unreadCount: Int!
}

enum NotificationSeverityEnum {
  CRITICAL
  INFO
  WARNING
}

type NotificationType {
  body: String!
  createdAt: DateTime!
  id: Int!
  read: Boolean!
  severity: NotificationSeverityEnum
  title: String!
  type: NotificationTypeEnum
  updatedAt: DateTime!
}

enum NotificationTypeEnum {
  ACTUATOR_MANUAL_OVERRIDE_EXPIRED
  ACTUATOR_STATE_CHANGED
  GENERAL
  NODE_OFFLINE
  NODE_ONLINE
  SENSOR_CRITICAL
  SENSOR_NOT_CRITICAL
}

type NotificationsUnreadCountType {
  unreadCount: Int!
}

type ObtainJSONWebToken {
  households: [HouseholdType!]!
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
  user: UserType
}

type Query {
  actuatorCondition(id: Int!): ActuatorConditionType
  actuatorNode(id: Int!): ActuatorNodeType
  allActuatorConditions(thresholdGroupId: Int!): [ActuatorConditionType!]
  allActuatorNodes(favorite: Boolean, mainframeId: Int!): [ActuatorNodeType!]
  allHouseholds: [HouseholdType!]
  allMainframes: [MainframeType!]
  allSensorConditions(thresholdGroupId: Int!): [SensorConditionType!]
  allSensorNodes(critical: Boolean, favorite: Boolean, mainframeId: Int!): [SensorNodeType!]
  allThresholdGroups(householdId: Int!): [ThresholdGroupType!]
  allUsers: [UserType!]
  dailyLogValues(date: Date!): DailyLogValuesType
  getNotifications: NotificationListType
  household(id: Int!): HouseholdType
  mainframe(id: Int!): MainframeType
  sensorCondition(
    """The ID of the object"""
    id: ID!
  ): SensorConditionType
  sensorNode(id: Int!): SensorNodeType
  sensorValuesForDateRange(dateRangeType: DateRangeTypeEnum, endDatetime: DateTime, sensorId: Int!): SensorDateRangeValuesWithMinMaxType
  thresholdGroup(id: Int!): ThresholdGroupType
  user(id: Int!): UserType
}

type Refresh {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}

type RemoveActuatorConditionMutation {
  message: String
  success: Boolean!
  thresholdGroup: ThresholdGroupType
}

type RemoveActuatorFromThresholdGroupMutation {
  message: String
  success: Boolean!
  thresholdGroup: ThresholdGroupType
}

type RemoveSensorConditionMutation {
  message: String
  success: Boolean!
  thresholdGroup: ThresholdGroupType
}

type SensorConditionType {
  active: Boolean!
  createdAt: DateTime!
  id: Int!
  operator: SensorOperatorEnum!
  operatorStr: String!
  sensor: SensorNodeType!
  thresholdGroup: ThresholdGroupType!
  updatedAt: DateTime!
  value: Float!
}

type SensorDateRangeValuesType {
  avgValue: Float
  endDate: DateTime!
  maxValue: Float!
  minValue: Float!
  startDate: DateTime!
}

type SensorDateRangeValuesWithMinMaxType {
  maxValue: Float
  minValue: Float
  values: [SensorDateRangeValuesType]
}

type SensorNodeSubscriptionType {
  batteryLevel: Float
  createdAt: DateTime!
  criticalOver: Float
  criticalUnder: Float
  currentValue: Float
  deviceId: String!
  displayCriticalOver: Boolean!
  displayCriticalUnder: Boolean!
  favorite: Boolean!
  id: Int!
  isCritical: Boolean!
  isOnline: Boolean!
  lastOnline: DateTime
  name: String!
  nodeType: NodeTypeEnum
  sensorType: Int!
  systemVersion: String
  type: Int!
  uid: UUID!
  unitType: UnitTypeEnum
  unitTypeStr: String!
}

type SensorNodeType {
  batteryLevel: Float
  createdAt: DateTime!
  criticalOver: Float
  criticalUnder: Float
  currentValue: Float
  deviceId: String!
  displayCriticalOver: Boolean!
  displayCriticalUnder: Boolean!
  favorite: Boolean!
  id: Int!
  isCritical: Boolean!
  isOnline: Boolean!
  lastOnline: DateTime
  mainframe: MainframeType
  name: String!
  nodeType: NodeTypeEnum
  sensorConditions: [SensorConditionType!]!
  sensorType: SensorTypeEnum
  systemVersion: String
  type: Int!
  uid: UUID!
  unitType: UnitTypeEnum
  unitTypeStr: String
  updatedAt: DateTime!
  values: [SensorDateRangeValuesType]
}

enum SensorOperatorEnum {
  """="""
  EQUAL

  """>"""
  GREATER_THAN

  """>="""
  GREATER_THAN_OR_EQUAL

  """<"""
  LESS_THAN

  """<="""
  LESS_THAN_OR_EQUAL

  """!="""
  NOT_EQUAL
}

enum SensorTypeEnum {
  CO2
  HUMIDITY
  LIGHT
  SOIL_MOISTURE
  SOIL_PH
  TEMPERATURE
  UNASSIGNED
}

type SensorValueType {
  createdAt: DateTime!
  id: Int!
  sensor: SensorNodeType!
  value: Float!
}

type SetActuatorChangeToStateThresholdGroupMutation {
  message: String
  success: Boolean!
  thresholdGroupActuator: ThresholdGroupActuatorType
}

type SetActuatorThresholdGroupPriorityMutation {
  message: String
  success: Boolean!
  thresholdGroupActuator: ThresholdGroupActuatorType
}

type SetCriticalOverDisplayMutation {
  message: String
  sensor: SensorNodeType
  success: Boolean!
}

type SetCriticalOverMutation {
  message: String
  sensor: SensorNodeType
  success: Boolean!
}

type SetCriticalUnderDisplayMutation {
  message: String
  sensor: SensorNodeType
  success: Boolean!
}

type SetCriticalUnderMutation {
  message: String
  sensor: SensorNodeType
  success: Boolean!
}

type SetFavoriteActuatorMutation {
  actuator: ActuatorNodeType
  message: String
  success: Boolean!
}

type SetFavoriteSensorMutation {
  message: String
  sensor: SensorNodeType
  success: Boolean!
}

type SetManualOverrideUntilMutation {
  actuator: ActuatorNodeType
  message: String
  success: Boolean!
}

type Subscription {
  nodeValues: SubscriptionType!
  notificationUnreadCount: Int!
}

enum SubscriptionResultType {
  ACTUATOR_MANUAL_OVERRIDE_EXPIRED
  ACTUATOR_ONLINE_STATUS_CHANGED
  ACTUATOR_STATE_CHANGED
  MAINFRAME_ONLINE_STATUS_CHANGED
  NOTIFICATIONS_UNREAD_COUNT
  SENSOR_IS_CRITICAL_CHANGED
  SENSOR_ONLINE_STATUS_CHANGED
  SENSOR_VALUE_LOGGED
}

type SubscriptionType {
  data: SubscriptionUnionType!
  type: SubscriptionResultType!
}

union SubscriptionUnionType = ActuatorNodeSubscriptionType | NotificationsUnreadCountType | SensorNodeSubscriptionType

type ThresholdGroupActuatorType {
  actuator: ActuatorNodeType!
  changeToState: Boolean!
  createdAt: DateTime!
  id: Int!
  priority: Int!
  thresholdGroup: ThresholdGroupType!
  updatedAt: DateTime!
}

type ThresholdGroupType {
  active: Boolean!
  actuatorConditions: [ActuatorConditionType!]!
  createdAt: DateTime!
  household: HouseholdType!
  id: Int!
  name: String!
  sensorConditions: [SensorConditionType!]!
  thresholdGroupActuators: [ThresholdGroupActuatorType!]!
  updatedAt: DateTime!
}

"""
Leverages the internal Python implementation of UUID (uuid.UUID) to provide native UUID objects
in fields, resolvers and input.
"""
scalar UUID

enum UnitTypeEnum {
  """ppm"""
  CO2

  """%"""
  HUMIDITY

  """Lux"""
  LIGHT

  """%"""
  SOIL_MOISTURE

  """pH"""
  SOIL_PH

  """°C"""
  TEMPERATURE
}

"""
Create scalar that ignores normal serialization/deserialization, since
that will be handled by the multipart request spec
"""
scalar Upload

type UserProfileImageMutation {
  profileImage: String
  success: Boolean
}

type UserType {
  email: String!
  firstName: String!
  id: Int!

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  isActive: Boolean!

  """Designates whether the user can log into this admin site."""
  isStaff: Boolean!

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  isSuperuser: Boolean!
  lastName: String!
  profileImage: String

  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
}

type Verify {
  payload: GenericScalar!
}