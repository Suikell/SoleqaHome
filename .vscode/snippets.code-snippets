{
  // https://github.com/Microsoft/vscode/issues/8102#issuecomment-423476360
  // https://code.visualstudio.com/docs/editor/userdefinedsnippets

  // imports
  "import default": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "impd",
    "body": "import ${2:moduleName} from '${1:module}'$0",
    "description": "default import",
  },
  "import named": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "impn",
    "body": "import { ${2:imports} } from '${1:module}'$0",
    "description": "named import",
  },
  "export default": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "expd",
    "body": "export default $1",
    "description": "default export",
  },
  "export named": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "expn",
    "body": "export { $1 }",
    "description": "named export",
  },

  // console logs
  "console log": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "clg",
    "body": "console.log($1)",
    "description": "Log output to console",
  },
  "console dir": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "cdir",
    "body": "console.dir($1)",
    "description": "Log output to console (dir)",
  },
  "console log object": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "clo",
    "body": "console.log('${1:object}', ${1:object})",
    "description": "Logs named object to console.",
  },

  // file name
  "file name": {
    "scope": "javascript,typescript,typescriptreact,graphql",
    "prefix": "fname",
    "body": "${TM_FILENAME_BASE/(.*)\\..+$/$1/}",
    "description": "insert name of the current file",
  },

  // clasic funtions
  "js function": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "fun",
    "body": ["const ${1:functionName} = (${2:params}) => {", "\t$3", "}"],
    "description": "javascript function",
  },
  "js function with object param": {
    "scope": "typescript,typescriptreact",
    "prefix": "funop",
    "body": [
      "type T${2}Options = {",
      "\t$3",
      "}",
      "",
      "const ${1:functionName} = ({ ${4:params} }: T${2}Options) => {",
      "\t$5",
      "}",
    ],
    "description": "javascript function with an object param",
  },

  // TS types
  "type": {
    "scope": "typescript,typescriptreact",
    "prefix": "tp",
    "body": ["type T${1:Name} = {", "\t$2", "}"],
    "description": "type",
  },
  "type one line": {
    "scope": "typescript,typescriptreact",
    "prefix": "tp1l",
    "body": "type T${1:Name} = ${2}",
    "description": "one line type",
  },
  "props of a component as a type": {
    "prefix": "pof",
    "body": ["PropsOf<typeof ${1:componentName}>${2}"],
    "description": "props of a component as a type",
  },

  // JS destructure
  "object destructure": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "desto",
    "body": "const { ${2:variables} } = ${1:object}",
    "description": "object destructure",
  },
  "array destructure": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "desta",
    "body": "const [${2:variables}] = ${1:array}",
    "description": "array destructure",
  },

  // JS array methods
  "js array map": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "amap",
    "body": [
      "const ${1:newArray} = ${2:oldArray}.map((${3:params}) => {",
      "\treturn $4",
      "})",
    ],
    "description": "javascript array.map",
  },
  "js array filter": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "afilt",
    "body": [
      "const ${1:newArray} = ${2:oldArray}.filter((${3:params}) => {",
      "\treturn $4",
      "})",
    ],
    "description": "javascript array.filter",
  },
  "js array reduce": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "ared",
    "body": [
      "const ${1:newVariable} = ${2:oldArray}.reduce((${3:acc}, ${5:params}) => {",
      "\treturn $6",
      "}, ${4:accInit})",
    ],
    "description": "javascript array.reduce",
  },
  "js array forEach": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "afoe",
    "body": ["${1:array}.forEach((${2:params}) => {", "\t$3", "})"],
    "description": "javascript array.forEach",
  },

  "promise": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "prom",
    "body": ["return new Promise((resolve, reject) => {", "\t${1}", "})"],
    "description": "creates and returns a new Promise",
  },

  // React
  "import react": {
    "scope": "typescript,typescriptreact",
    "prefix": "impr",
    "body": "import * as React from 'react'$0",
    "description": "import React",
  },

  // React basic hooks
  "react useState": {
    "scope": "typescript,typescriptreact",
    "prefix": "ustate",
    "body": "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = React.useState(${3:initialState})",
    "description": "React.useState",
  },
  "react useState typed": {
    "scope": "typescript,typescriptreact",
    "prefix": "usttate",
    "body": "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = React.useState<${2:TType}>(${3:initialState})",
    "description": "React.useState with type",
  },
  "react useRef": {
    "scope": "typescript,typescriptreact",
    "prefix": "uref",
    "body": "const ref${1:name} = React.useRef<${2:TType}>(${3:initialState})",
    "description": "React.useRef",
  },
  "react useEffect": {
    "scope": "typescript,typescriptreact",
    "prefix": "ueffect",
    "body": ["React.useEffect(() => {", "\t${1}", "}, [${2}])"],
    "description": "React.useEffect",
  },
  "react useEffect async": {
    "scope": "typescript,typescriptreact",
    "prefix": "uefas",
    "body": [
      "React.useEffect(() => {",
      "\tconst ${1:functionName} = async () => {",
      "\t\t${2}",
      "\t}",
      "\t",
      "\t${1:functionName}()",
      "}, [${3}])",
    ],
    "description": "React.useEffect async",
  },
  "react useCallback": {
    "scope": "typescript,typescriptreact",
    "prefix": "ucback",
    "body": [
      "const ${1:variable} = React.useCallback((${2}) => {",
      "\t${3}",
      "}, [${4}])",
    ],
    "description": "React.useCallback",
  },
  "react useCallback typed": {
    "scope": "typescript,typescriptreact",
    "prefix": "ucbt",
    "body": [
      "const ${1:variable} = React.useCallback(({ ${3} }: ${2:TOptionType}) => {",
      "\t${4}",
      "}, [${5}])",
    ],
    "description": "React.useCallback with typed options",
  },
  "react useMemo": {
    "scope": "typescript,typescriptreact",
    "prefix": "umemo",
    "body": [
      "const ${1:variable} = React.useMemo(() => {",
      "\treturn ${2}",
      "}, [${3}])",
    ],
    "description": "React.useMemo",
  },
  // TODO: refine / add reducer function template
  "react useReducer": {
    "scope": "typescript,typescriptreact",
    "prefix": "ureducer",
    "body": [
      "const [${1:state}, ${2:dispatch}] = React.useReducer(${3:reducer}, ${4:initialState}, ${5:init})",
    ],
    "description": "React.useReducer",
  },

  // React custom hook
  "react hook": {
    "scope": "typescript,typescriptreact",
    "prefix": "chook",
    "body": [
      "import * as React from 'react'",
      "",
      "export const ${1:$TM_FILENAME_BASE} = () => {",
      "\t$2",
      "}",
    ],
    "description": "custom react hook",
  },
  "react hook with options": {
    "scope": "typescript,typescriptreact",
    "prefix": "cthook",
    "body": [
      "import * as React from 'react'",
      "",
      "type TOptions = {",
      "\t${2}",
      "}",
      "",
      "export const ${1:$TM_FILENAME_BASE} = ({ ${3} }: TOptions) => {",
      "\t$4",
      "}",
    ],
    "description": "custom react hook with typed options",
  },

  // react provider with hook
  "react context provider": {
    "scope": "typescriptreact",
    "prefix": "prov",
    "body": [
      "import * as React from 'react'",
      "",
      "import { createContext } from '~utils/context/createContext'",
      "",
      "type T${2:ContextValue} = {",
      "\t$3",
      "}",
      "",
      "const [",
      "  Provider, //",
      "  use${1:${TM_FILENAME_BASE/(.*)Provider/$1/}}Ctx,",
      "] = createContext<T${2:ContextValue}>(`${1:${TM_FILENAME_BASE/(.*)Provider/$1/}}`)",
      "",
      "type TProps = RequiredChildren & {",
      "\t$4",
      "}",
      "",
      "export const $TM_FILENAME_BASE: React.FC<TProps> = ({ children, ${5} }) => {",
      "  ",
      "\t$6",
      "  return <Provider value={$7}>{children}</Provider>",
      "}",
      "",
      "export { use${1:${TM_FILENAME_BASE/(.*)Provider/$1/}}Ctx }",
      "",
    ],
    "description": "custom react context provider with typed options and exported hook",
  },

  // react components
  "react functional component with no props": {
    "scope": "typescriptreact",
    "prefix": "fcnoprop",
    "body": [
      "import * as React from 'react'",
      "",
      "type TProps = NoChildren",
      "",
      "export const ${1:$TM_FILENAME_BASE}: React.FC<TProps> = () => {",
      "\treturn (",
      "\t\t$2",
      "\t)",
      "}",
      "",
    ],
    "description": "React functional component without props",
  },
  "react functional component with no children": {
    "scope": "typescriptreact",
    "prefix": "fcnochild",
    "body": [
      "import * as React from 'react'",
      "",
      "type TProps = NoChildren & {",
      "\t${2}",
      "}",
      "",
      "export const ${1:$TM_FILENAME_BASE}: React.FC<TProps> = ({ ${3} }) => {",
      "\t$5",
      "\t",
      "\treturn (",
      "\t\t$4",
      "\t)",
      "}",
      "",
    ],
    "description": "React functional component without children",
  },
  "react functional component with optional children": {
    "scope": "typescriptreact",
    "prefix": "fcwoptchildren",
    "body": [
      "import * as React from 'react'",
      "",
      "type TProps = Children & {",
      "\t${2}",
      "}",
      "",
      "export const ${1:$TM_FILENAME_BASE}: React.FC<TProps> = ({ children, ${3} }) => {",
      "\t$5",
      "\t",
      "\treturn (",
      "\t\t$4",
      "\t)",
      "}",
      "",
    ],
    "description": "React functional component with optional children",
  },
  "react functional component with required children": {
    "scope": "typescriptreact",
    "prefix": "fcwreqchildren",
    "body": [
      "import * as React from 'react'",
      "",
      "type TProps = RequiredChildren & {",
      "\t${2}",
      "}",
      "",
      "export const ${1:$TM_FILENAME_BASE}: React.FC<TProps> = ({ children, ${3} }) => {",
      "\t$5",
      "\t",
      "\treturn (",
      "\t\t$4",
      "\t)",
      "}",
      "",
    ],
    "description": "React functional component with required children",
  },

  // Gql
  "gql query": {
    "scope": "graphql",
    "prefix": "qu",
    "body": [
      "query $TM_FILENAME_BASE${1:(${2:params})} {",
      "\t${6:${7:rename}: }${3:queryName}${4:(${5:params})} {",
      "\t\tid",
      "\t\t${8}",
      "\t}",
      "}",
    ],
    "description": "GraphQL query",
  },
  "gql mutation": {
    "scope": "graphql",
    "prefix": "mu",
    "body": [
      "mutation $TM_FILENAME_BASE(${1:params}) {",
      "\t${4:${5:rename}: }${2:mutationName}(${3:params}) {",
      "\t\t${6:id}${0}",
      "\t}",
      "}",
    ],
    "description": "GraphQL mutation",
  },
  "gql subscription": {
    "scope": "graphql",
    "prefix": "su",
    "body": [
      "subscription $TM_FILENAME_BASE${1:(${2:params})} {",
      "\t${6:${7:rename}: }${3:subscriptionName}${4:(${5:params})} {",
      "\t\tid",
      "\t\t${8}",
      "\t}",
      "}",
    ],
    "description": "GraphQL subscription",
  },
  "gql fragment": {
    "scope": "graphql",
    "prefix": "fr",
    "body": [
      "fragment $TM_FILENAME_BASE on ${1:GqlType} {",
      "\t${2:id}${0}",
      "}",
    ],
    "description": "GraphQL fragment",
  },

  // Comments
  "doc comment": {
    "scope": "javascript, typescript, typescriptreact",
    "prefix": "doc",
    "body": ["/**", " * ${1}", " */"],
    "description": "documentation comment",
  },
}
